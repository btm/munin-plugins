#!/usr/bin/perl -w
#
# Copyright (C) 2008 Nathan Haneysmith
#
# Munin plugin to monitor SQL Outstanding Disk I/O by use of SNMP.
# Based on snmp__df plugin.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# $Log$
#
#
#
#%# family=snmpauto
#%# capabilities=snmpconf

use strict;
use Net::SNMP;

my $DEBUG = 0;

my $host      = $ENV{host}      || undef;
my $port      = $ENV{port}      || 161;
my $community = $ENV{community} || "public";

my $response;

if (defined $ARGV[0] and $ARGV[0] eq "snmpconf")
{
    print "require 1.3.6.1.4.1.311.1.4.1.1.2.\n"; # SQL mib
    exit 0;
}

if ($0 =~ /^(?:|.*\/)snmp_([^_]+)_sqloutstandingio$/)
{
    $host  = $1;
    if ($host =~ /^([^:]+):(\d+)$/)
    {
        $host = $1;
        $port = $2;
    }
}

elsif (!defined($host))
{
    print "# Debug: $0 -- $1\n" if $DEBUG;
    die "# Error: couldn't understand what I'm supposed to monitor.";
}

my ($session, $error) = Net::SNMP->session(
    -hostname  => $host,
    -community => $community,
    -port      => $port
    );

if (!defined ($session))
{
    die "Croaking: $error";
}

my $mssqlstatus = "1.3.6.1.4.1.311.1.4.1.1.2.";
$response = $session->get_table($mssqlstatus);

if (!defined ($response))
{
    die "Croaking: $error";
}

if (defined $ARGV[0] and $ARGV[0] eq "config")
{
    print "host_name $host\n";
    print "graph_title SQL Outstanding IO
graph_args --base 1000 -l 0
graph_vlabel outstanding io transactions
graph_scale no
graph_category SQL
graph_info This graph shows the number pending physical reads and writes
read.label pending reads
read.draw LINE2
read.type GAUGE
read.info The number of physical reads pending
write.label pending writes
write.draw LINE2
write.type GAUGE
write.info The number of physical writes pending
";
    exit 0;
}

# the values
while (my ($sqloid, $value) = each(%$response)) {
    my @oid = split(/\./, $sqloid);
    if ($oid[13] eq 9) {
     print "read.value $value\n";
    }
    if ($oid[13] eq 10) {
     print "write.value $value\n";
    }
}


