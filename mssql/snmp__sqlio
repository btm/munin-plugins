#!/usr/bin/perl -w
#
# Copyright (C) 2008 Nathan Haneysmith
#
# Munin plugin to monitor SQL Disk I/O by use of SNMP.
# Based on snmp__df plugin.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# $Log$
#
#
#
#%# family=snmpauto
#%# capabilities=snmpconf

use strict;
use Net::SNMP;

my $DEBUG = 0;

my $host      = $ENV{host}      || undef;
my $port      = $ENV{port}      || 161;
my $community = $ENV{community} || "public";

my $response;

if (defined $ARGV[0] and $ARGV[0] eq "snmpconf")
{
    print "index 1.3.6.1.4.1.311.1.4.1.1.2.\n"; # SQL mib
    exit 0;
}

if ($0 =~ /^(?:|.*\/)snmp_([^_]+)_sqlio$/)
{
    $host  = $1;
    if ($host =~ /^([^:]+):(\d+)$/)
    {
        $host = $1;
        $port = $2;
    }
}

elsif (!defined($host))
{
    print "# Debug: $0 -- $1\n" if $DEBUG;
    die "# Error: couldn't understand what I'm supposed to monitor.";
}

my ($session, $error) = Net::SNMP->session(
    -hostname  => $host,
    -community => $community,
    -port      => $port
    );

if (!defined ($session))
{
    die "Croaking: $error";
}

my $mssqlstatus = "1.3.6.1.4.1.311.1.4.1.1.2.";
$response = $session->get_table($mssqlstatus);

if (!defined ($response))
{
    die "Croaking: $error";
}

if (defined $ARGV[0] and $ARGV[0] eq "config")
{
    print "host_name $host\n";
    print "graph_title SQL IO
graph_args --base 1000 -l 0
graph_vlabel transactions
graph_scale no
graph_category SQL
graph_info This graph shows the number of physical reads and writes
pagereads.label page reads
pagereads.draw LINE2
pagereads.type COUNTER
pagereads.info The number of physical page reads completed
singlepagewrites.label page writes
singlepagewrites.draw LINE2
singlepagewrites.type COUNTER
singlepagewrites.info The number of single page writes completed does not include log writes, cache flushes Lazy Writer, or batch writes
batchwrites.label batch writes
batchwrites.draw LINE2
batchwrites.type COUNTER
batchwrites.info The number of pages written to disk using batch I/O
lazywrites.label lazy writes
lazywrites.draw LINE2
lazywrites.type COUNTER
lazywrites.info The number of pages flushed to disk by the Lazy Writer
logwrites.label log writes
logwrites.draw LINE2
logwrites.type COUNTER
logwrites.info The number of log pages physically written to disk
";
    exit 0;
}

# the values
while (my ($sqloid, $value) = each(%$response)) {
    my @oid = split(/\./, $sqloid);
    if ($oid[13] eq 4) {
     print "pagereads.value $value\n";
    }
    if ($oid[13] eq 5) {
     print "singlepagewrites.value $value\n";
    }
    if ($oid[13] eq 6) {
     print "batchwrites.value $value\n";
    }
    if ($oid[13] eq 7) {
     print "lazywrites.value $value\n";
    }
    if ($oid[13] eq 8) {
     print "logwrites.value $value\n";
    }
}


